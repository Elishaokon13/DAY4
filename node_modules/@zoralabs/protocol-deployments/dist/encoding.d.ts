import { Address } from "viem";
import { uniswapV3SwapRouterABI } from "./generated/wagmi";
import { buySupplyWithSwapRouterHookAddress } from "./generated/wagmi";
import { Hex } from "viem";
import { AbiParametersToPrimitiveTypes, ExtractAbiFunction } from "abitype";
/** ABI parameters for performing a SafeTransferFrom based swap when selling on secondary. */
export declare const safeTransferSwapAbiParameters: readonly [{
    readonly name: "recipient";
    readonly internalType: "address payable";
    readonly type: "address";
}, {
    readonly name: "minEthToAcquire";
    readonly internalType: "uint256";
    readonly type: "uint256";
}, {
    readonly name: "sqrtPriceLimitX96";
    readonly internalType: "uint160";
    readonly type: "uint160";
}];
export declare const buySupplyWithSwapRouterHookAbiParameters: readonly [{
    readonly name: "buyRecipient";
    readonly internalType: "address";
    readonly type: "address";
}, {
    readonly name: "swapRouterCall";
    readonly internalType: "bytes";
    readonly type: "bytes";
}];
export declare const buySupplyWithSwapRouterHookReturnParameters: readonly [{
    readonly name: "amountCurrency";
    readonly internalType: "uint256";
    readonly type: "uint256";
}, {
    readonly name: "coinsPurchased";
    readonly internalType: "uint256";
    readonly type: "uint256";
}];
/**
 * Encodes the calldata for the BuySupplyWithSwapRouterHook.
 *
 * @param buyRecipient - The address of the recipient of the coins that are purchased.
 * @param swapRouterCall - The calldata to send for swapping on the swap router.  For the call, the recipient of the swap
 * must be the hook contract.
 * @returns The encoded calldata.
 */
export declare const encodeBuySupplyWithSwapRouterHookCalldata: (buyRecipient: Address, swapRouterCall: Hex) => `0x${string}`;
type ExactInputSingleParams = AbiParametersToPrimitiveTypes<ExtractAbiFunction<typeof uniswapV3SwapRouterABI, "exactInputSingle">["inputs"]>[0];
type ExactInputParams = AbiParametersToPrimitiveTypes<ExtractAbiFunction<typeof uniswapV3SwapRouterABI, "exactInput">["inputs"]>[0];
/**
 * Encodes the call data for buying supply with a single-hop swap router hook.
 * This function creates the hook call and hook data needed to buy Coin supply using ETH through a Uniswap V3 single-hop swap.
 *
 * @param buyRecipient - The address that will receive the coins purchased
 * @param exactInputSingleParams - The parameters for the exactInputSingle function on the swap router (recipient is omitted as it will be set to the hook address)
 * @param chainId - The chain ID to use for getting the hook address
 * @param ethValue - Optional amount of ETH to send with the call to the swap router
 * @returns Object containing the encoded hook call, hook data, and ETH value
 */
export declare const encodeBuySupplyWithSingleHopSwapRouterHookCall: ({ buyRecipient, exactInputSingleParams, chainId, ethValue, }: {
    buyRecipient: Address;
    exactInputSingleParams: Omit<ExactInputSingleParams, "recipient">;
    chainId: keyof typeof buySupplyWithSwapRouterHookAddress;
    ethValue?: bigint;
}) => {
    hook: "0x264b731e40691Da5B40aA63AC5c3B7F7DAafA721" | "0x6B78be0808262b1d5E9B1eeDfE448aDCE2C637a8";
    hookData: `0x${string}`;
    value: bigint | undefined;
};
/**
 * Encodes the call data for buying supply with a multi-hop swap router hook.
 * This function creates the hook call and hook data needed to buy Coin supply using ETH through a Uniswap V3 multi-hop swap.
 *
 * @param buyRecipient - The address that will receive the coins purchased
 * @param exactInputParams - The parameters for the exactInput function on the swap router (recipient is omitted as it will be set to the hook address)
 * @param chainId - The chain ID to use for getting the hook address
 * @param ethValue - Optional amount of ETH to send with the call to the swap router
 * @returns Object containing the encoded hook call, hook data, and ETH value
 */
export declare const encodeBuySupplyWithMultiHopSwapRouterHookCall: ({ buyRecipient, exactInputParams, chainId, ethValue, }: {
    buyRecipient: Address;
    exactInputParams: Omit<ExactInputParams, "recipient">;
    chainId: keyof typeof buySupplyWithSwapRouterHookAddress;
    ethValue?: bigint;
}) => {
    hook: "0x264b731e40691Da5B40aA63AC5c3B7F7DAafA721" | "0x6B78be0808262b1d5E9B1eeDfE448aDCE2C637a8";
    hookData: `0x${string}`;
    value: bigint | undefined;
};
/**
 * Decodes the return data from the BuySupplyWithSwapRouterHook.
 *
 * @param returnData - The return data from the BuySupplyWithSwapRouterHook.
 * @returns The decoded return data.
 */
export declare const decodeBuySupplyWithSwapRouterHookReturn: (returnData: Hex) => {
    amountCurrency: bigint;
    coinsPurchased: bigint;
};
export {};
//# sourceMappingURL=encoding.d.ts.map